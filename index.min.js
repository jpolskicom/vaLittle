"use strict";

exports.__esModule = true;
exports.vaLittle = vaLittle;

function vaLittle() {
  var _this = this;

  // rules
  this.required = function(value) {
    return !value.trim();
  };

  this.email = function(value) {
    return value === "" ||
      value.match(
        /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
      )
      ? false
      : true;
  };

  this.phone = function(value) {
    return value === "" || value.match(/^(?:\(?\?)?(?:[-\.\(\)\s]*(\d)){9}\)?$/)
      ? false
      : true;
  };

  this.postCode = function(value) {
    return value === "" || value.match(/^([0-9]{2}\-[0-9]{3})$/) ? false : true;
  };

  this.requireGroupState = {};

  this.requireGroup = function(value, group) {
    if (
      value.trim() &&
      value !== false &&
      !_this.requireGroupState.hasOwnProperty(group)
    ) {
      _this.requireGroupState[group] = false;
    }

    return false;
  };

  this.equalGroupState = {};

  this.equalGroup = function(value, group) {
    if (
      value.trim() &&
      value !== false &&
      !_this.equalGroupState.hasOwnProperty(group)
    ) {
      _this.equalGroupState[group] = value;
    } else if (
      value.trim() &&
      value !== false &&
      value !== _this.equalGroupState[group]
    ) {
      delete _this.equalGroupState[group];
    }

    return false;
  };

  this.min = function(value, val) {
    return value === "" || value.length >= val ? false : true;
  };

  this.max = function(value, val) {
    return value === "" || value.length <= val ? false : true;
  };

  this.minVal = function(value, val) {
    return value === "" || value >= val ? false : true;
  };

  this.maxVal = function(value, val) {
    return value === "" || value <= val ? false : true;
  };

  this.number = function(value) {
    return value === "" || value.match(/^([0-9 -]+)$/) ? false : true;
  };

  this.text = function(value) {
    return value === "" || value.match(/^([a-zA-Z _-]+)$/) ? false : true;
  };

  this.regex = function(value, val) {
    return value === "" || value.match(new RegExp(val)) ? false : true;
  }; // check

  this.rules = {};
  this.messages = {};

  this.prepareResults = function() {
    for (var r in _this.results) {
      if (!Object.keys(_this.results[r]).indexOf("requireGroup")) {
        var g = _this.requireGroupState[_this.rules[r].requireGroup];
        _this.results[r].requireGroup =
          g === true || g === undefined ? true : false;
      }

      if (
        Object.keys(_this.results[r]).indexOf("equalGroup") > -1 &&
        !_this.equalGroupState[_this.rules[r].equalGroup]
      ) {
        var _g = _this.equalGroupState[_this.rules[r].equalGroup];
        _this.results[r].equalGroup = _g === undefined ? true : false;
      }

      var _e = Object.values(_this.results[r]).indexOf(true);

      _this.results[r].errors = _e == -1 ? false : true;
      _this.results[r].message =
        _e == -1 ? false : _this.messages[r][Object.keys(_this.rules[r])[_e]];
    }

    var e = Object.keys(_this.results)
      .map(function(e) {
        return _this.results[e].errors;
      })
      .indexOf(true);
    _this.results.errors = e !== -1 ? true : false;
  };

  this.check = function(data) {
    var t = _this;
    _this.results = {};

    var _loop = function _loop(r) {
      _this.results[r] = {};
      error = false;
      Object.keys(t.rules[r]).forEach(function(rule) {
        var v = t.rules[r][rule];

        if (v === true) {
          var error = _this[rule](data[r]);
        } else if (v !== false) {
          var error = _this[rule](data[r], v);
        }

        _this.results[r][rule] = error;
      });
    };

    for (var r in t.rules) {
      var error;

      _loop(r);
    }

    _this.prepareResults();

    _this.requireGroupState = {};
    return _this.results;
  };
}
